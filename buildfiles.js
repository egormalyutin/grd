// Generated by CoffeeScript 2.1.1
var BuildFiles, download, gulp, merge, mustache, rename;

gulp = require('gulp');

// PLUGINS
download = require('gulp-downloader');

rename = require('gulp-rename');

merge = require('merge-stream');

mustache = require('mustache');

BuildFiles = class BuildFiles {
  constructor(config) {
    var sf;
    this.config = config;
    sf = this;
    Object.defineProperty(this, 'compiled', {
      get: function() {
        if (sf._compiled == null) {
          sf.compile();
        }
        return sf._compiled;
      }
    });
  }

  links() {
    var arch, dp, i, len, link, name, path, platform, platforms, r, ref, version;
    // GET LINKS
    version = this.config.version;
    dp = this.config.download;
    platforms = this.config.platforms;
    r = {};
    for (name in platforms) {
      platform = platforms[name];
      r[name] = {};
      ref = platform.arches;
      for (i = 0, len = ref.length; i < len; i++) {
        arch = ref[i];
        path = mustache.render(platform.filename, {version, arch});
        link = mustache.render(dp, {path});
        r[name][arch] = link;
      }
    }
    return r;
  }

  compile() {
    var arch, fn, link, links, name, platform, plt, r;
    links = this.links();
    r = {
      platforms: {},
      streams: [],
      stream: void 0
    };
    for (name in links) {
      platform = links[name];
      r.platforms[name] = {};
      plt = r.platforms[name];
      // DOWNLOAD AND PROCESS BUILDFILE
      fn = (name, arch, link, plt) => {
        var dw, sf;
        dw = download(link);
        dw = this.config.platforms[name].prepare(dw);
        dw = dw.pipe(rename(function(path) {
          return path.dirname = `${name}/${arch}/` + path.dirname;
        }));
        sf = this;
        plt[arch] = {
          stream: dw,
          build: function() {
            return sf.config.platforms[name].build(dw, ...arguments);
          }
        };
        return r.streams.push(dw);
      };
      for (arch in platform) {
        link = platform[arch];
        fn(name, arch, link, plt);
      }
    }
    r.stream = merge(...r.streams);
    this._compiled = r;
    return r;
  }

};

module.exports = BuildFiles;
